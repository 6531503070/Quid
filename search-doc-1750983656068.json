{"searchDocs":[{"title":"Config","type":0,"sectionRef":"#","url":"/quid/api/Config","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Config","url":"/quid/api/Config#properties","content":" ","version":null,"tagName":"h2"},{"title":"version​","type":1,"pageTitle":"Config","url":"/quid/api/Config#version","content":"&lt;/&gt; Config.version: number Version state  ","version":null,"tagName":"h3"},{"title":"fingerprint​","type":1,"pageTitle":"Config","url":"/quid/api/Config#fingerprint","content":"&lt;/&gt; Config.fingerprint: string Fingerprint state ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Config","url":"/quid/api/Config#functions","content":" ","version":null,"tagName":"h2"},{"title":"clock​","type":1,"pageTitle":"Config","url":"/quid/api/Config#clock","content":"&lt;/&gt; Config.clock() → number-- A unix-timestamp in milliseconds as a integer. A factory function for produce unix-timestamp in milliseconds as a integer. TIP You can overwrite this, implement your own clock function.  ","version":null,"tagName":"h3"},{"title":"entropy​","type":1,"pageTitle":"Config","url":"/quid/api/Config#entropy","content":"&lt;/&gt; Config.entropy( version: number, timestamp: number, fingerprint: string, counter: number ) → number-- A random number between [0, 1] A factory function for produce random number between [0, 1] TIP You can overwrite this, implement your own entropy function. ","version":null,"tagName":"h3"},{"title":"quid","type":0,"sectionRef":"#","url":"/quid/api/quid","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"quid","url":"/quid/api/quid#functions","content":" ","version":null,"tagName":"h2"},{"title":"next​","type":1,"pageTitle":"quid","url":"/quid/api/quid#next","content":"&lt;/&gt; quid.next( version: number?, timestamp: number? ) → string-- quid Generate a new quid with global config state  ","version":null,"tagName":"h3"},{"title":"parse​","type":1,"pageTitle":"quid","url":"/quid/api/quid#parse","content":"&lt;/&gt; quid.parse(quid: string) → ( number,-- version number,-- timestamp number-- uniqueness ) Parse a quid string into its components  ","version":null,"tagName":"h3"},{"title":"is​","type":1,"pageTitle":"quid","url":"/quid/api/quid#is","content":"&lt;/&gt; quid.is(x: any | string?) → boolean Check if x is a valid quid  ","version":null,"tagName":"h3"},{"title":"new​","type":1,"pageTitle":"quid","url":"/quid/api/quid#new","content":"&lt;/&gt; quid.new(config_state: Config?) → quid Create a new quid instance with custom config state  ","version":null,"tagName":"h3"},{"title":"Next​","type":1,"pageTitle":"quid","url":"/quid/api/quid#Next","content":"&lt;/&gt; quid:Next( version: number?, timestamp: number? ) → string-- quid Generate a new quid with local config state ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/quid/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/quid/docs/getting-started#installation","content":" Add quid to your wally.toml:  quid = &quot;6531503070/quid@1.0.0&quot;   tip If you're new to Wally, check out the Wally installation guide.  ","version":"Next","tagName":"h2"},{"title":"Basic Setup​","type":1,"pageTitle":"Getting Started","url":"/quid/docs/getting-started#basic-setup","content":" Here's how to set up quid with a simple data structure:  local quid = require(path.to.quid) local uid = quid.next()   ","version":"Next","tagName":"h2"},{"title":"Quick Links​","type":1,"pageTitle":"Getting Started","url":"/quid/docs/getting-started#quick-links","content":" IntroductionGetting StartedAPI ReferenceMoonwave ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/quid/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/quid/docs/intro#features","content":" Version-detectable: The uid can be represent version of item / entity data schemaK-Sortable: The uid can be K-sortable as it is time-basedRandom-Customizable: The random specification can be customized, by providing a configHuman-Friendly: Human-friendly writing and reading, as it is represent as base64url  ","version":"Next","tagName":"h2"},{"title":"Quick Links​","type":1,"pageTitle":"Introduction","url":"/quid/docs/intro#quick-links","content":" IntroductionGetting StartedAPI ReferenceMoonwave ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}